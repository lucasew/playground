#!/usr/bin/env python3

import subprocess
from sys import argv, stdout
from os import environ
from json import loads as json_decode, dumps as json_encode, dump
from datetime import datetime, timezone
from time import sleep

p = subprocess.Popen(["journalctl", "--no-pager", "--output=json", "-f", "--utc", *argv[1:]], stdout = subprocess.PIPE, stderr = subprocess.PIPE)

LOGLEVEL_EMERGENCY, LOGLEVEL_ALERT, LOGLEVEL_CRITICAL, LOGLEVEL_ERROR, LOGLEVEL_WARNING, LOGLEVEL_NOTICE, LOGLEVEL_INFO, LOGLEVEL_DEBUG = range(0, 8) 

class CSVHandler:
    def __init__(self, writer = stdout):
        import csv
        self.writer = csv.writer(stdout, delimiter= ",") # ele jÃ¡ lida com escape codes
        self.writer.writerow(['hostname', 'timestamp', 'cgroup', 'cmdline', 'message'])
    def handle(self, entry):
        hostname = entry['_HOSTNAME']
        timestamp = int(entry['__REALTIME_TIMESTAMP'])
        cgroup = entry['_SYSTEMD_CGROUP']
        cmdline = entry['_CMDLINE']
        message = entry['MESSAGE']
        self.writer.writerow([hostname, timestamp, cgroup, cmdline, message])


class JSONHandler:
    def __init__(self, writer = stdout):
        self.writer = writer

    def handle(self, entry):
        from json import dump
        hostname = entry['_HOSTNAME']
        timestamp = int(entry['__REALTIME_TIMESTAMP'])
        cgroup = entry['_SYSTEMD_CGROUP']
        cmdline = entry['_CMDLINE']
        message = entry['MESSAGE']
        dump({
            'hostname': hostname,
            'timestamp': timestamp, 
            'cgroup': cgroup,
            'cmdline': cmdline,
            'message': message
        }, self.writer)
        self.writer.write('\n')

class TelegramHandler:
    def __init__(self, token, chat_id):
        self.token = token
        self.chat_id = chat_id
    def send_message(self, text, **kwargs):
        from urllib import request, parse
        data = parse.urlencode(dict(chat_id = self.chat_id, text = text, **kwargs))
        res = request.urlopen(f'https://api.telegram.org/bot{self.token}/sendMessage?{data}')
        ret = res.read()
        if len(ret) > 0:
            print(str(ret))
    def handle(self, entry):
        hostname = entry['_HOSTNAME']
        timestamp = int(entry['__REALTIME_TIMESTAMP'])
        cgroup = entry['_SYSTEMD_CGROUP']
        cmdline = entry['_CMDLINE']
        message = entry['MESSAGE']
        timestamp_str = datetime.fromtimestamp(timestamp / 1000 / 1000, tz = timezone.utc)
        text = f'#{hostname} {timestamp_str} ({cgroup}): {message}'
        self.send_message(text)

class DiscordHandler:
    def __init__(self, webhook):
        self.webhook = webhook
    def send_message(self, content):
        sleep(0.1)
        from urllib import parse, request
        data = parse.urlencode(dict(content = content)).encode('utf-8')
        req = request.Request(self.webhook, data = data, method = 'POST')
        req.headers['User-Agent'] = 'curl/7.80.0'
        res = request.urlopen(req)
        ret = res.read()
        if len(ret) > 0:
            print(str(ret))
    def handle(self, entry):
        hostname = entry['_HOSTNAME']
        timestamp = int(entry['__REALTIME_TIMESTAMP'])
        cgroup = entry['_SYSTEMD_CGROUP']
        cmdline = entry['_CMDLINE']
        message = entry['MESSAGE']
        timestamp_str = datetime.fromtimestamp(timestamp / 1000 / 1000, tz = timezone.utc)
        text = f'#{hostname} {timestamp_str} ({cgroup}): {message}'
        self.send_message(text)



# handler = JSONHandler(stdout)
# handler = CSVHandler(stdout)
# handler = TelegramHandler(token = environ['TELEGRAM_TOKEN'], chat_id = environ['TELEGRAM_CHAT_ID'])
handler = DiscordHandler(webhook = environ['DISCORD_WEBHOOK'])

handler.send_message("Iniciando bot")
while True:
    out = p.stdout.readline()
    if len(out) == 0 and p.poll() != None:
        break
    if len(out) > 0:
        last = json_decode(out)
        priority = int(last['PRIORITY'])
        message_lower = last['MESSAGE'].lower()
        # if priority <= 3 or "err" in message_lower.lower():
        handler.handle(last)
print(last.keys())
